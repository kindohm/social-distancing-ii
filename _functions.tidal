let 
  limit p = (|* gain 1.2) $ p
  lim = limit
  ccvrand min max x = ccv (range min max $ shrand x)
  ccvholdrand duration min max x = ccv (segment duration $ range min max $ shrand x)
  ccvrandhold = ccvholdrand
  shift p = (1024 ~>) $ p
  shift' num p = (num ~>) $ p
  shiftBy = shift'
  shiftby = shiftBy
  shrand num = shiftBy num $ rand
  ssb = someCyclesBy
  sb x f p = sometimesBy x f $ p
  gtfo p = (const $ s "~") $ p 
  g = gtfo
  rytm = s "rytm"
  four = s "four"
  harmor = s "harmor"
  metalChan = harmor # midichan 0
  dudChan= harmor # midichan 2
  dudsChan = dudChan
  sqChan = harmor # midichan 1
  stdnote = note "-24"
  pad1 = midichan 0 # stdnote # rytm
  pad2 = midichan 1 # stdnote # rytm
  pad3 = midichan 2 # stdnote # rytm
  pad4 = midichan 3 # stdnote # rytm
  pad5 = midichan 4 # stdnote # rytm
  pad6 = midichan 5 # stdnote # rytm
  pad7 = midichan 6 # stdnote # rytm
  pad8 = midichan 7 # stdnote # rytm
  pad9 = midichan 8 # stdnote # rytm
  pad10 = midichan 9 # stdnote # rytm
  pad11 = midichan 10 # stdnote # rytm
  pad12 = midichan 11 # stdnote # rytm
  dg0 p = shift $ degradeBy 0 $ p
  dg1 p = shift $ degradeBy 0.1 $ p
  dg2 p = shift $ degradeBy 0.2 $ p
  dg3 p = shift $ degradeBy 0.3 $ p
  dg4 p = shift $ degradeBy 0.4 $ p
  dg5 p = shift $ degradeBy 0.5 $ p
  dg6 p = shift $ degradeBy 0.6 $ p
  dg7 p = shift $ degradeBy 0.7 $ p
  dg8 p = shift $ degradeBy 0.8 $ p
  dg9 p = shift $ degradeBy 0.9 $ p
  perf1 x = ccn 35 # ccv x # rytm
  perf2 x = ccn 36 # ccv x # rytm
  perf3 x = ccn 37 # ccv x # rytm
  perf4 x = ccn 39 # ccv x # rytm
  perf5 x = ccn 40 # ccv x # rytm
  perf6 x = ccn 41 # ccv x # rytm
  perf7 x = ccn 42 # ccv x # rytm
  perf8 x = ccn 43 # ccv x # rytm
  perf9 x = ccn 44 # ccv x # rytm
  perf10 x = ccn 45 # ccv x # rytm
  perf11 x = ccn 46 # ccv x # rytm
  perf12 x = ccn 47 # ccv x # rytm
  perf3flip = perf3 (shiftBy 1102 $ choose [0,127])
  perf4flip = perf4 (shiftBy 1103 $ choose [0,127])
  perf6rand = perf6 (range 0 127 $ shrand 1206)
  perf7rand = perf7 (range 0 127 $ shrand 1100)
  perf8rand = perf8 (range 0 127 $ shrand 1101)
  perf1rand = perf1 (range 0 127 $ shrand 1202)
  perf2rand = perf2 (range 0 127 $ shrand 1203)
  perf3rand = perf3 (range 0 127 $ shrand 1204)
  perf4rand = perf4 (range 0 127 $ shrand 1205)
  roll' howOften p = sometimesBy howOften (stutWith 2 (0.0625*3) id) $ p
  roll howOften p = sometimesBy howOften (stutWith 2 (0.0625*3) id) $ shift $ p
  rollBy nums howOften p = sometimesBy howOften (stutWith nums (0.0625*3) id) $ shift $ p
  rollSlow howOften p = sometimesBy howOften (stutWith 2 (0.125*3) id) $ shift $ p
  rollFast howOften p = sometimesBy howOften (stutWith 2 (0.0625*3/2) id) $ shift $ p
  one a p = sb a (off (0.0625) id) $ shiftBy 77 $ p
  oneSlow a p = sb a (off (0.125) id) $ shiftBy 893 $ p
  oneFast a p = sb a (off (0.0625/2) id) $ shiftBy 8191 $ p
  one' a p = sb a (off (0.0625) id) $ p
  filter1 = ccn 1
  filter2 = ccn 2
  detune = ccn 3 
  prism = ccn 4 
  harmonizer = ccn 5 
  phwidth = ccn 6 
  phoff = ccn 7 
  penv = ccn 8 
  porta = ccn 9
  timbre = ccn 10
  xfade x  = ccv x # ccn 11
  phspeed = ccn 12 
  filter1width = ccn 13
  filter2width = ccn 14
  filter1env= ccn 15
  filter2env = ccn 16
  detune2 = ccn 17
  tremdepth = ccn 18
  tremspeed = ccn 19
  phtype = ccn 20
  phlevel = ccn 21
  mapp mapping p = ( unwrap $ fmap (mapping!!) $ p) 
  mapp' mapping p = (fmap (mapping!!) $ p)
  rytmmap mapping pattern = midichan (mapp mapping $ pattern) # rytm 
  rytmmap' mapping pattern = midichan (mapp' mapping $ pattern) # rytm
  xfademap mapping pattern = xfade (mapp mapping $ pattern)
  notemap mapping pattern = note (mapp mapping $ pattern)
  scene x = ccv x # ccn 92 # rytm
  discRange a b = (discretise 1 $ range a b $ shrand 10003)
  discrange = discRange
  triRange a b c = (range a b $ slow c tri)
  trirange = triRange
  cpsDisc a b = (|* cps (discRange a b))
  cpsRange a b c = (|* cps (triRange a b c))
  cpsTri = cpsRange
  randDelay = stack [ slow 2.13 $ ccn 45 # ccv (shiftBy 5544 $ choose [0,127]) -- d
                      , slow 1.13 $ ccn 46 # ccv (range 0 127 $ shrand 9988) -- dt
                      , slow 3.1 $ ccn 47 # ccv (range 0 127 $ shrand 19988) ] # rytm
  normDelay = stack [ ccn 45 # ccv 0, ccn 46 # ccv 0, ccn 47 # ccv 0 ] # rytm
  rep nums p = stutWith nums (0.0625*3) id $ p
  rep' nums p = stutWith nums (0.125*3) id $ p
  ghost x p = off (0.0625) x $ p
  tuna = chop 16 $ loopAt 16 $ gain 1 # s "<tuna>" # lpf 2000 # hpf 100
  pidgeon = chop 16 $ loopAt 16 $ gain 1 # s "<pidgeon>" # lpf 2000 # hpf 100
  trip = chop 16 $ loopAt 16 $ gain 1 # s "<trip>" # lpf 2000 # hpf 100
  tunapidgeontrip = chop 16 $ loopAt 16 $ gain 1 # s "<tuna pidgeon trip>" # lpf 2000 # hpf 100
